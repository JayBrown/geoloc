#!/bin/zsh
# shellcheck shell=bash

# geoloc v0.2.2

if [[ $(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -I 2>/dev/null) == "AirPort: Off" ]] ; then
	echo "Error: WiFi disabled" >&2
	exit 1
fi
if [[ $1 == "--debug" ]] ; then
	shift
	debug=true
else
	debug=false
fi
geoloc_all=$(osascript 2>/dev/null <<EOF
use framework "CoreLocation"
use framework "Foundation"
use scripting additions

property this : a reference to the current application
property nil : a reference to missing value
property _1 : a reference to reference

property CLLocationManager : a reference to CLLocationManager of this
property kCLLocationAccuracyThreeKilometers : a reference to 3000.0
--------------------------------------------------------------------------------
property running : false
property result : missing value -- Lat./long. or error description
property number : 0 -- Error code
property seconds : 10 -- Maximum time to allow script to run
--------------------------------------------------------------------------------
# IMPLEMENTATION:
my performSelectorOnMainThread:"getLocation" withObject:nil waitUntilDone:true
return my result
--------------------------------------------------------------------------------
# HANDLERS & SCRIPT OBJECTS:
to getLocation()
    set locationManager to CLLocationManager's new()

    locationManager's setDelegate:me
    locationManager's setDesiredAccuracy:kCLLocationAccuracyThreeKilometers

    set my running to true
    set started to current date

    locationManager's startUpdatingLocation()

    repeat while my running
        delay 0.5
        if (current date) - started > my seconds then exit repeat
    end repeat
end getLocation

on locationManager:locationManager didUpdateLocations:locations
    local locationManager, locations

    locationManager's stopUpdatingLocation()

    set my running to false
    set my result to (locations's valueForKey:"coordinate") as record
end locationManager:didUpdateLocations:

on locationManager:locationManager didFailWithError:err
    local locationManager, err

    tell err's code()
        set my number to it
        set my result to item (it + 1) in my enum's kCLError
        if it ≠ 0 then set my running to false
    end tell
end locationManager:didFailWithError:

script enum
    property kCLError : {¬
        "Location Unknown", ¬
        "Denied", ¬
        "Network", ¬
        "Heading Failure", ¬
        "Region Monitoring Denied", ¬
        "Region Monitoring Failure", ¬
        "Region Monitoring Setup Delayed", ¬
        "Region Monitoring Response Delayed", ¬
        "Geocode Found No Result", ¬
        "Geocode Found Partial Result", ¬
        "Geocode Canceled", ¬
        "Deferred Failed", ¬
        "Deferred Not Updating Location", ¬
        "Deferred Accuracy Too Low", ¬
        "Deferred Distance Filtered", ¬
        "Deferred Canceled", ¬
        "Ranging Unavailable", ¬
        "Ranging Failure"}
    property CLAuthorizationStatus : {¬
        "Not Determined", ¬
        "Restricted", ¬
        "Denied", ¬
        "Authorized (Always)", ¬
        "Authorized When In Use"}
end script
---------------------------------------------------------------------------❮END❯
EOF
)
if ! [[ $geoloc_all ]] ; then
	$debug && echo "Error: osascript"
	if ! [[ $(route get 0.0.0.0 2>/dev/null) ]] ; then
		echo "Error: no internet" >&2
		exit 1
	fi
	queryurl="https://api.mylnikov.org/geolocation/wifi?v=1.1&data=open&search="
	closestwifis=$(/System/Library/PrivateFrameworks/Apple80211.framework/Versions/A/Resources/airport -s | grep ":" | head -13)
	if ! [[ $closestwifis ]] ; then
		echo "Error: WiFi scan" >&2
		exit 1
	fi
	$debug && echo "$closestwifis"
	query=""
	while read -r closewifi
	do
		cnid=2
		cnss=3
		while true
		do
			wifimac=$(echo "$closewifi" | awk '{print $'"$cnid"'}')
			if echo "$wifimac" | grep "^[a-f0-9][a-f0-9]:[a-f0-9][a-f0-9]:[a-f0-9][a-f0-9]:[a-f0-9][a-f0-9]:[a-f0-9][a-f0-9]:[a-f0-9][a-f0-9]$" &>/dev/null ; then
				wifiss=$(echo "$closewifi" | awk '{print $'"$cnss"'}')
				break
			else
				((cnid++))
				((cnss++))
			fi
		done
		if [[ $query ]] ; then
			query="$query;$wifimac,$wifiss"
		else
			query="$wifimac,$wifiss"
		fi
		$debug && echo "$wifimac,$wifiss"
	done < <(echo "$closestwifis")
	$debug && echo "$query"
	query64=$(echo "$query" | base64 -)
	$debug && echo "$query64"
	queryurl="$queryurl{$query64}"
	$debug && echo "$queryurl"
	geoloc_all=$(curl -s -m 60 "$queryurl" 2>/dev/null)
	remote=true
else
	remote=false
fi
if ! [[ $geoloc_all ]] ; then
	echo "Error: raw geolocation data" >&2
	exit 1
fi
if [[ $1 == "--raw" ]] ; then
	echo "$geoloc_all"
	exit 0
else
	$debug && echo "$geoloc_all"
	echo "$geoloc_all" | pbcopy
fi
if ! $remote ; then
	geoloc_raw=$(echo "$geoloc_all" | awk -F"," '{print $1}')
	$debug && echo "$geoloc_raw"
	latitude=$(echo "$geoloc_raw" | awk -F":" '{print $2}')
	if ! [[ $latitude ]] ; then
		echo "Error: latitude parsing" >&2
		exit 1
	fi
	$debug && echo "$latitude"
	longitude=$(echo "$geoloc_all" | awk -F":" '{print $3}')
	if ! [[ $longitude ]] ; then
		echo "Error: longitude parsing" >&2
		exit 1
	fi
	$debug && echo "$longitude"
else
	geoloc_raw=$(echo "$geoloc_all" | awk -F"lat\"\:\ " '{print $2}')
	$debug && echo "$geoloc_raw"
	latitude=$(echo "$geoloc_raw" | awk -F"," '{print $1}')
	if ! [[ $latitude ]] ; then
		echo "Error: latitude parsing" >&2
		exit 1
	fi
	$debug && echo "$latitude"
	longitude=$(echo "$geoloc_raw" | awk -F"lon\"\:\ " '{print $2}' | awk -F"," '{print $1}')
	if ! [[ $longitude ]] ; then
		echo "Error: longitude parsing" >&2
		exit 1
	fi
	$debug && echo "$longitude"
fi
echo "$latitude $longitude"
if [[ $1 != "--solar" ]] ; then
	exit 0
fi
if ! [[ $(route get 0.0.0.0 2>/dev/null) ]] ; then
	echo "Error: no internet" >&2
	exit 1
fi
solar_all=$(curl -s -m 60 "v2.wttr.in/$latitude,$longitude?format=%S;%s" 2>/dev/null)
if ! [[ $solar_all ]] ; then
	echo "Error: solar data" >&2
	exit 1
fi
$debug && echo "$solar_all"
sunrise=$(echo "$solar_all" | awk -F";" '{print $1}')
if ! [[ $sunrise ]] ; then
	echo "Error: sunrise parsing" >&2
	exit 1
fi
$debug && echo "$sunrise"
sunset=$(echo "$solar_all" | awk -F";" '{print $2}')
if ! [[ $sunset ]] ; then
	echo "Error: sunset parsing" >&2
	exit 1
fi
$debug && echo "$sunset"
today=$(date +"%a %b %d")
thisyear=$(date +%Y)
echo -e "sunrise: $today $sunrise $thisyear\nsunset: $today $sunset $thisyear"
	
exit 0
